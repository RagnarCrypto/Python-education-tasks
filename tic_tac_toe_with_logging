from datetime import datetime

# Function for logging errors

def log_error(ex):
    #error=[]
    date = datetime.now().date()
    time = datetime.now().time()
    error = [date, time, str(ex)]
    error_str = ' '.join([str(elem) for elem in error])
    with open (r'C:\Users\Hp\Documents\Personal\Python\Python_course\Python_course_code\xo_logs.txt', 'r+') as log_file:
        log_file.seek(0,2)
        log_file.write(f'\n {error_str}')
    log_file.close
    
# Define board

board = [' ',' ',' ',' ',' ',' ',' ',' ',' ']


# Function for showing board

def show_board(position):
    
    for i,c in enumerate(board):
        if (i+1)%3 == 0:
            print(c)
        else:
            print(c,'|', end='', sep='')


# Define winning combination

wining_combination = [(0,1,2),(3,4,5),(6,7,8),(0,3,6),(1,4,7),(2,5,8),(0,4,8),(2,4,6)]


# Function for checking winner

def check_win(position, combination):
    
    for (x,y,z) in combination:
        if position[x] == position[y] and position[y] == position[z] and (position[x] == 'X' or position[x] == 'O'):
            #win_combianation = combination[i]
            return position[x] #win_combianation
        #else:
    return 'no_win'


# Function to protect incorrect sign 

def check_sign(sign):
    if sign == 'X' or sign == 'O':
        return sign
    else:
        raise ValueError('Sign should be "X" or "O"')


# Custom class for field error

class InputFieldError(Exception):
    '''Raised when field already busy'''


# Function to protect the fields

def check_field(field):
    if board[field] != ' ':
        raise InputFieldError('Field already busy, try another one')
    else:
        return field


# Game

def game(board):
    
    current_sign = input('Enter your sign "X" or "O":')
   
    while True:
        try:
            check_sign(current_sign)
            break
        except ValueError as ex:
            print(f'Input error, {ex}')
            log_error(ex)
            current_sign = input('Enter your sign "X" or "O":')
            continue
    
    
    while(check_win(board, wining_combination) == 'no_win'):
        field = int(input('Enter the field number: '))-1
        
        while True:
            try:
                check_field(field)
                break
            except InputFieldError as ex:
                print(f'Input error, {ex}')
                log_error(ex)
                field  = int(input('Enter the field number: '))-1
                continue
        
            
        board[field] = current_sign

        show_board(board)

        win_sign = check_win(board, wining_combination)
        if win_sign != 'no_win':
            print(f'The winner is {win_sign}')

        if current_sign == 'X':
            current_sign = 'O'
        else:
            current_sign = 'X'
        

